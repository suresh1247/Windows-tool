// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace WebApi.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250605060218_InfoDatabaseAddedCompositeKeys")]
    partial class InfoDatabaseAddedCompositeKeys
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("ConnectionTestModel", b =>
                {
                    b.Property<DateTime>("dateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConnectionTest")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DNSResolutionStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NSLookupOutput")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NSLookupStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ResolvedIP")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ResolvedName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Server")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("dateTime");

                    b.ToTable("connectionTestModels");
                });

            modelBuilder.Entity("ProcessInfo", b =>
                {
                    b.Property<int>("PID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("CPUUsagePercentage")
                        .HasColumnType("REAL");

                    b.Property<double>("MemoryUsageMB")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SystemInfoServerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SystemInfoServerName1")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SystemInfodateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SystemInfodateTime1")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("PID");

                    b.HasIndex("SystemInfodateTime", "SystemInfoServerName");

                    b.HasIndex("SystemInfodateTime1", "SystemInfoServerName1");

                    b.HasIndex("dateTime", "ServerName");

                    b.ToTable("processInfos");
                });

            modelBuilder.Entity("RebootRequest", b =>
                {
                    b.Property<DateTime>("dateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("dateTime");

                    b.ToTable("rebootRequests");
                });

            modelBuilder.Entity("ServerHealth", b =>
                {
                    b.Property<DateTime>("dateTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("CPUUsage")
                        .HasColumnType("REAL");

                    b.Property<string>("DNSResolution")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("DiskUsage")
                        .HasColumnType("REAL");

                    b.Property<double>("MemoryUsage")
                        .HasColumnType("REAL");

                    b.Property<string>("PingStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("dateTime");

                    b.ToTable("serverHealths");
                });

            modelBuilder.Entity("SystemInfo", b =>
                {
                    b.Property<DateTime>("dateTime")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<string>("ServerName")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<double>("MemoryUsagePercentage")
                        .HasColumnType("REAL");

                    b.Property<double>("TotalCPUUsage")
                        .HasColumnType("REAL");

                    b.HasKey("dateTime", "ServerName");

                    b.ToTable("systemInfos");
                });

            modelBuilder.Entity("ProcessInfo", b =>
                {
                    b.HasOne("SystemInfo", null)
                        .WithMany("Top5CPUProcesses")
                        .HasForeignKey("SystemInfodateTime", "SystemInfoServerName");

                    b.HasOne("SystemInfo", null)
                        .WithMany("Top5MemoryProcesses")
                        .HasForeignKey("SystemInfodateTime1", "SystemInfoServerName1");

                    b.HasOne("SystemInfo", "systemInfo")
                        .WithMany()
                        .HasForeignKey("dateTime", "ServerName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("systemInfo");
                });

            modelBuilder.Entity("SystemInfo", b =>
                {
                    b.Navigation("Top5CPUProcesses");

                    b.Navigation("Top5MemoryProcesses");
                });
#pragma warning restore 612, 618
        }
    }
}
